name: Github-Action-CI
on: push

jobs:
  lint:
    name: ubuntu latest - Python 3.8 - lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: 'x64'

    - name: Install dependencies
      run: pip install --prefer-binary -r dev_requirements.txt -r requirements.txt

    - name: Black lint
      run: black ${{ secrets.PACKAGE_FOLDER }} --diff --check

    - name: Pylint
      run: |
        pylint --rcfile=standard.rc ${{ secrets.PACKAGE_FOLDER }}
        if [ $? -ne 1 ]; then exit 0; fi

  tests:
    needs: lint
    name: ${{ matrix.os }}${{ matrix.arch }} - Python 3.8 - ${{ matrix.type }} - tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        arch: [ x64, x86 ]
        type: [sources, cython]
        exclude:
          - os: macos-latest # currently not supported
            arch: x86
          - os: ubuntu-latest # currently not supported
            arch: x86
          - os: windows-latest # don't test 'sources' twice on windows
            arch: x86
            type: sources

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: ${{ matrix.arch }}

    - name: Install dependencies
      run: pip install --prefer-binary -r dev_requirements.txt -r requirements.txt

    - name: Compile project
      if: matrix.type == 'cython'
      env:
        CYTHON_IGNORE: true
      run: |
        python setup.py install

    - name: Pytests
      run: pytest --cov=. --cov-config=.coveragerc --durations=0 -rw tests

    - name: Publish coverage
      if: matrix.type == 'sources'
      run: coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  linux-wheels:
    needs: tests
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: ${{ matrix.os }}-${{ matrix.arch }} - Python 3.8 - deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        arch: [ manylinux2014_x86_64, manylinux2014_i686 ] # manylinux2014_aarch64
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: ${{ matrix.arch }}

    - name: Install cibuildwheel
      run: |
        pip install cibuildwheel

    - name: Install Visual C++ for Python3.8
      if: runner.os == 'Windows'
      run: |
        choco install vcpython38 -f -y

    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse

    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: ${{ secrets.PYPI_USERNAME }}
        password: ${{ secrets.PYPI_PASSWORD }}
        verify_metadata: true
        skip_existing: true

  other-wheels:
    needs: tests
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: ${{ matrix.os }}${{ matrix.arch }} - Python 3.8 - deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
        arch: [ x64, x86 ]
        exclude:
          - os: macos-latest # currently not supported
            arch: x86

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: ${{ matrix.arch }}

    - name: Install dependencies
      run: pip install --prefer-binary -r dev_requirements.txt -r requirements.txt

    - name: Build wheel
      run: python setup.py bdist_wheel

    - name: Publish package
      run: |
        python -m twine upload --repository-url https://upload.pypi.org/legacy/ -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --skip-existing dist/*
